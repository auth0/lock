// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`passwordless connection initPasswordless() calls initNS  with mustAcceptTerms:false when opts.mustAcceptTerms is false 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": false,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with mustAcceptTerms:true when opts.mustAcceptTerms is true 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": true,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with send:code when opts.passwordlessMethod is code 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": false,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with send:code when opts.passwordlessMethod is undefined 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": false,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with send:link when opts.passwordlessMethod is link 1`] = `
[
  null,
  Immutable.Map {
    "send": "link",
    "mustAcceptTerms": false,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with showTerms:false when opts.showTerms is false 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": false,
    "showTerms": false,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with showTerms:true when opts.showTerms is true 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": false,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() calls initNS  with showTerms:true when opts.showTerms is undefined 1`] = `
[
  null,
  Immutable.Map {
    "send": "code",
    "mustAcceptTerms": false,
    "showTerms": true,
  },
]
`;

exports[`passwordless connection initPasswordless() should call webAPI.getUserCountry when there is no default location 1`] = `
[
  undefined,
  "location",
  {
    "recoverResult": "US",
    "successFn": [Function],
    "syncFn": [Function],
  },
]
`;

exports[`passwordless connection initPasswordless() should call webAPI.getUserCountry when there is no default location 2`] = `
[
  "id",
  "cb",
]
`;

exports[`passwordless connection initPasswordless() should call webAPI.getUserCountry when there is no default location 3`] = `
[
  "model",
  "en",
]
`;

exports[`passwordless connection initPasswordless() should load default location via options.defaultLocation 1`] = `
[
  undefined,
  "EN",
]
`;

exports[`passwordless connection mustAcceptTerms() should return \`mustAcceptTerms\` 1`] = `
[
  "model",
  "mustAcceptTerms",
  false,
]
`;

exports[`passwordless connection toggleTermsAcceptance() should tset \`termsAccepted\` to false when \`termsAccepted\` is true 1`] = `
[
  "model",
  "termsAccepted",
  true,
]
`;

exports[`passwordless connection toggleTermsAcceptance() should tset \`termsAccepted\` to true when \`termsAccepted\` is false 1`] = `
[
  "model",
  "termsAccepted",
  false,
]
`;
