// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`passwordless actions login() calls webApi.passwordlessVerify() with email options 1`] = `
[
  "id",
  {
    "auth": "params",
    "connection": "email",
    "email": "email",
    "verificationCode": "vcode",
  },
  [Function],
]
`;

exports[`passwordless actions login() calls webApi.passwordlessVerify() with sms options 1`] = `
[
  "id",
  {
    "auth": "params",
    "connection": "sms",
    "phoneNumber": "phoneNumberWithDiallingCode",
    "verificationCode": "vcode",
  },
  [Function],
]
`;

exports[`passwordless actions login() on webApi.passwordlessVerify() callback calls logInSuccess on success 1`] = `
[
  "id",
  {
    "result": true,
  },
]
`;

exports[`passwordless actions login() on webApi.passwordlessVerify() callback when there is an error emits the "authorization_error" event 1`] = `
[
  "model",
  [Error: foobar],
]
`;

exports[`passwordless actions login() on webApi.passwordlessVerify() callback when there is an error formats the error 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  true,
]
`;

exports[`passwordless actions login() on webApi.passwordlessVerify() callback when there is an error formats the error 2`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  false,
  "error,passwordless,some_error_code",
]
`;

exports[`passwordless actions login() sets setSubmitting to true 1`] = `
[
  "getEntity",
  "lock",
  "id",
]
`;

exports[`passwordless actions login() sets setSubmitting to true 2`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  true,
]
`;

exports[`passwordless actions requestPasswordlessEmail() calls setPasswordlessStarted() on success 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [Function],
]
`;

exports[`passwordless actions requestPasswordlessEmail() calls setPasswordlessStarted() on success 2`] = `
[
  "model",
  false,
]
`;

exports[`passwordless actions requestPasswordlessEmail() calls setPasswordlessStarted() on success 3`] = `
[
  "model",
  true,
]
`;

exports[`passwordless actions requestPasswordlessEmail() calls startPasswordless 1`] = `
[
  "id",
  {
    "connection": "email",
    "email": "email",
    "send": "send",
  },
  [Function],
]
`;

exports[`passwordless actions requestPasswordlessEmail() calls startPasswordless with a custom email connection name 1`] = `
[
  "id",
  {
    "connection": "custom-connection",
    "email": "email",
    "send": "send",
  },
  [Function],
]
`;

exports[`passwordless actions requestPasswordlessEmail() calls validateAndSubmit() 1`] = `
[
  "id",
  [
    "email",
  ],
  [Function],
]
`;

exports[`passwordless actions requestPasswordlessEmail() normalizes the error message with a generic error 1`] = `
[
  "getEntity",
  "lock",
  "id",
]
`;

exports[`passwordless actions requestPasswordlessEmail() normalizes the error message with a generic error 2`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  false,
  "error,passwordless,some_error_code",
]
`;

exports[`passwordless actions requestPasswordlessEmail() normalizes the error message with a sms_provider_error error and description includes (Code: 21211) 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  false,
  "error,passwordless,bad.phone_number",
]
`;

exports[`passwordless actions resendEmail() calls setResendFailed on error 1`] = `
[
  "getEntity",
  "lock",
  "id",
]
`;

exports[`passwordless actions resendEmail() calls setResendFailed on error 2`] = `
[
  "updateEntity",
  "lock",
  "id",
  "resend",
]
`;

exports[`passwordless actions resendEmail() calls setResendFailed on error 3`] = `
[
  "model",
]
`;

exports[`passwordless actions resendEmail() calls setResendSuccess() on success 1`] = `
[
  "getEntity",
  "lock",
  "id",
]
`;

exports[`passwordless actions resendEmail() calls setResendSuccess() on success 2`] = `
[
  "updateEntity",
  "lock",
  "id",
  "resend",
]
`;

exports[`passwordless actions resendEmail() calls setResendSuccess() on success 3`] = `
[
  "model",
]
`;

exports[`passwordless actions restart calls restartPasswordless 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
]
`;

exports[`passwordless actions sendSMS() calls setPasswordlessStarted() on success 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [Function],
]
`;

exports[`passwordless actions sendSMS() calls setPasswordlessStarted() on success 2`] = `
[
  "model",
  false,
]
`;

exports[`passwordless actions sendSMS() calls setPasswordlessStarted() on success 3`] = `
[
  "model",
  true,
]
`;

exports[`passwordless actions sendSMS() calls startPasswordless 1`] = `
[
  "id",
  {
    "connection": "sms",
    "phoneNumber": "phoneNumberWithDiallingCode",
    "send": "send",
  },
  [Function],
]
`;

exports[`passwordless actions sendSMS() calls startPasswordless with a custom SMS connection 1`] = `
[
  "id",
  {
    "connection": "custom-connection",
    "phoneNumber": "phoneNumberWithDiallingCode",
    "send": "send",
  },
  [Function],
]
`;

exports[`passwordless actions sendSMS() calls validateAndSubmit() 1`] = `
[
  "id",
  [
    "phoneNumber",
  ],
  [Function],
]
`;

exports[`passwordless actions sendSMS() normalizes the error message emits the "authorization_error" event 1`] = `
[
  "model",
  [Error: foobar],
]
`;

exports[`passwordless actions sendSMS() normalizes the error message with a generic error 1`] = `
[
  "getEntity",
  "lock",
  "id",
]
`;

exports[`passwordless actions sendSMS() normalizes the error message with a generic error 2`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  false,
  "error,passwordless,some_error_code",
]
`;

exports[`passwordless actions sendSMS() normalizes the error message with a sms_provider_error error and description includes (Code: 21211) 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
  false,
  "error,passwordless,bad.phone_number",
]
`;

exports[`passwordless actions toggleTermsAcceptance() calls internalToggleTermsAcceptance() 1`] = `
[
  "updateEntity",
  "lock",
  "id",
  [MockFunction],
]
`;

exports[`passwordless actions toggleTermsAcceptance() calls internalToggleTermsAcceptance() 2`] = `
[
  "model",
]
`;
