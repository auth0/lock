// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomInput when type == checkbox and when placeholderHTML is set renders correctly as a CheckBoxInput 1`] = `
<div
  className="auth0-lock-input-block auth0-lock-input-custom_input auth0-lock-input-checkbox"
>
  <div
    className="auth0-lock-input-wrap"
  >
    <label>
      <input
        aria-invalid={false}
        aria-label="Custom Input"
        checked={false}
        id="1-custom_input"
        name="custom_input"
        onChange={[Function]}
        type="checkbox"
      />
      <span
        className=""
        dangerouslySetInnerHTML={
          {
            "__html": "<b>Placeholder</b>",
          }
        }
      />
    </label>
  </div>
</div>
`;

exports[`CustomInput when type == checkbox highlights placeholder text when no invalid hint is provided 1`] = `
<div
  className="auth0-lock-input-block auth0-lock-input-custom_input auth0-lock-error auth0-lock-input-checkbox"
>
  <div
    className="auth0-lock-input-wrap"
  >
    <label>
      <input
        aria-invalid={true}
        aria-label="Custom Input"
        checked={false}
        id="1-custom_input"
        name="custom_input"
        onChange={[Function]}
        type="checkbox"
      />
      <span
        className="no-hint"
        dangerouslySetInnerHTML={
          {
            "__html": "<b>Placeholder</b>",
          }
        }
      />
    </label>
  </div>
</div>
`;

exports[`CustomInput when type == checkbox renders correctly as a CheckBoxInput 1`] = `
<div
  className="auth0-lock-input-block auth0-lock-input-custom_input auth0-lock-input-checkbox"
>
  <div
    className="auth0-lock-input-wrap"
  >
    <label>
      <input
        aria-invalid={false}
        aria-label="Custom Input"
        checked={false}
        id="1-custom_input"
        name="custom_input"
        onChange={[Function]}
        type="checkbox"
      />
      <span
        className=""
      >
        placeholder
      </span>
    </label>
  </div>
</div>
`;

exports[`CustomInput when type == checkbox shows an error when value is incorrect 1`] = `
<div
  className="auth0-lock-input-block auth0-lock-input-custom_input auth0-lock-error auth0-lock-input-checkbox"
>
  <div
    className="auth0-lock-input-wrap"
  >
    <label>
      <input
        aria-invalid={true}
        aria-label="Custom Input"
        checked={false}
        id="1-custom_input"
        name="custom_input"
        onChange={[Function]}
        type="checkbox"
      />
      <span
        className=""
        dangerouslySetInnerHTML={
          {
            "__html": "<b>Placeholder</b>",
          }
        }
      />
    </label>
  </div>
  <div
    className="auth0-lock-error-msg"
    id="auth0-lock-error-msg-custom_input"
    role="alert"
  >
    <div
      className="auth0-lock-error-invalid-hint"
    >
      invalid-hint-custom_input
    </div>
  </div>
</div>
`;

exports[`CustomInput when type == hidden renders correctly as a input[type=hidden] 1`] = `
<input
  id={1}
  name="custom_input"
  type="hidden"
  value="hidden_value"
/>
`;

exports[`CustomInput when type == input calls \`changeField\` when changed 1`] = `
[
  1,
  "custom_input",
  "newUser",
  "validator",
]
`;

exports[`CustomInput when type == input renders correctly as a TextInput 1`] = `
<div
  data-__type="text_input"
  data-ariaLabel="Custom Input"
  data-iconUrl="iconUrl"
  data-invalidHint="invalid-hint-custom_input"
  data-isValid={false}
  data-lockId={1}
  data-name="custom_input"
  data-onChange={[Function]}
  data-placeholder="placeholder"
  data-value="field-value-custom_input"
/>
`;

exports[`CustomInput when type == input sets isValid as true when \`isFieldVisiblyInvalid\` is false 1`] = `
<div
  data-__type="text_input"
  data-ariaLabel="Custom Input"
  data-iconUrl="iconUrl"
  data-invalidHint="invalid-hint-custom_input"
  data-isValid={true}
  data-lockId={1}
  data-name="custom_input"
  data-onChange={[Function]}
  data-placeholder="placeholder"
  data-value="field-value-custom_input"
/>
`;

exports[`CustomInput when type === select calls \`startOptionSelection\` when clicked 1`] = `
[
  1,
  "custom_input",
  "iconUrl",
]
`;

exports[`CustomInput when type === select renders correctly as a SelectInput 1`] = `
<div
  data-__type="select_input"
  data-ariaLabel="Custom Input"
  data-iconUrl="iconUrl"
  data-isValid={false}
  data-lockId={1}
  data-name="custom_input"
  data-onClick={[Function]}
  data-placeholder="placeholder"
/>
`;

exports[`CustomInput when type === select sets isValid as true when \`isFieldVisiblyInvalid\` is false 1`] = `
<div
  data-__type="select_input"
  data-ariaLabel="Custom Input"
  data-iconUrl="iconUrl"
  data-isValid={true}
  data-lockId={1}
  data-name="custom_input"
  data-onClick={[Function]}
  data-placeholder="placeholder"
/>
`;
