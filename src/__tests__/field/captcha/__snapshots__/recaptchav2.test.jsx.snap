// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RecaptchaV2 should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ReCAPTCHA
    lock={
      Immutable.Map {
        "id": "__lock-id__",
        "core": Immutable.Map {
          "captcha": Immutable.Map {
            "provider": "recaptchav2",
            "sitekey": "mySiteKey",
          },
          "transient": Immutable.Map {
            "ui": Immutable.Map {
              "language": "en-US",
            },
          },
        },
      }
    }
    onChange={[Function]}
    onErrored={[Function]}
    onExpired={[Function]}
    sitekey="mySiteKey"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="auth0-lock-recaptchav2"
      />,
      "className": "auth0-lock-recaptcha-block auth0-lock-recaptcha-block-error",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "className": "auth0-lock-recaptchav2",
      },
      "ref": [Function],
      "rendered": null,
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="auth0-lock-recaptchav2"
        />,
        "className": "auth0-lock-recaptcha-block auth0-lock-recaptcha-block-error",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "auth0-lock-recaptchav2",
        },
        "ref": [Function],
        "rendered": null,
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
